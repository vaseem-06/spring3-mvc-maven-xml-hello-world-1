pipeline {
    agent any

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Git branch to build')
        booleanParam(name: 'SKIP_TEST', defaultValue: false, description: 'Skip unit tests?')
        choice(name: 'MAVEN_GOAL', choices: ['clean package', 'clean deploy', 'package'], description: 'Maven goal to run')
        booleanParam(name: 'PUBLISH_TO_NEXUS', defaultValue: false, description: 'Publish artifact to Nexus')
    }

    tools {
        jdk "Java-17" // Must match your Jenkins configured JDK 17
        maven "Maven"  // Must match your Jenkins Maven installation
    }

    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "13.233.66.167:8081/"
        NEXUS_REPOSITORY = "ncodeit-helloworld"
        NEXUS_CREDENTIAL_ID = "nexus_credentials"
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: "${params.BRANCH_NAME}", url: 'https://github.com/vaseem-06/spring3-mvc-maven-xml-hello-world-1.git'
            }
        }

        stage('Clean Workspace') {
            steps {
                echo 'Cleaning old build artifacts...'
                sh 'rm -rf target/*'
            }
        }

        stage('Maven Build') {
            steps {
                script {
                    def mvnCmd = "mvn ${params.MAVEN_GOAL} -U"
                    if (params.SKIP_TEST) {
                        mvnCmd += " -DskipTests"
                    }
                    echo "Running Maven command: ${mvnCmd}"
                    sh mvnCmd
                }
            }
        }

        stage('Publish to Nexus') {
            when {
                expression { return params.PUBLISH_TO_NEXUS }
            }
            steps {
                script {
                    def pom = readMavenPom file: "pom.xml"
                    def filesByGlob = findFiles(glob: "target/*.${pom.packaging}")
                    if (filesByGlob.length == 0) {
                        echo "No artifact found, skipping Nexus upload"
                    } else {
                        def artifactPath = filesByGlob[0].path
                        echo "Uploading artifact ${artifactPath} to Nexus"
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: "${BUILD_NUMBER}",
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId, classifier: '', file: artifactPath, type: pom.packaging],
                                [artifactId: pom.artifactId, classifier: '', file: "pom.xml", type: "pom"]
                            ]
                        )
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Build completed successfully!"
        }
        failure {
            echo "Build failed! Check console output for details."
        }
    }
}
